/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package JavaAnalyser;

import com.github.javaparser.StaticJavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.Node;
import com.github.javaparser.ast.NodeList;
import com.github.javaparser.ast.body.TypeDeclaration;
import com.github.javaparser.ast.expr.Name;
import com.github.javaparser.ast.expr.SimpleName;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class App {

    public static void main(String[] args) {
        App newApp = new App();

       if(args.length != 1) {
           System.out.println("Wrong number of arguments: " + args.length + ". Should be 1.");
       }

       String path = args[0];

        Map<String,Object> resultData = new HashMap<String,Object>();

        try {
            File file = new File(path);
            CompilationUnit cunit = StaticJavaParser.parse(file);

            /*
            Path pathToSource = Paths.get("sourcePath");
            SourceRoot sourceRoot = new SourceRoot(pathToSource);
            sourceRoot.tryToParse();
            List<CompilationUnit> compilations = sourceRoot.getCompilationUnits();
             */

            List<CompilationUnit> compilations = new ArrayList<>();
            compilations.add(cunit);

            ArrayList<Map<String,Object>> objects = new ArrayList<Map<String,Object>>();

            for(CompilationUnit cu : compilations) {
                NodeList<TypeDeclaration<?>> nodes = cu.getTypes();

                Map<String,Object> object = handleNode(cu);
                objects.add(object);
            }
            System.out.println(objects);

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    public static Map<String,Object> handleNode(Node node) {

        Map<String,Object> object = new HashMap<>();
        String kind = node.getClass().toString();

        String name = null; // to be set
        String usr = null; // to be set
        ArrayList<Map<String,Object>> entities = new ArrayList<>();

        for(Node child: node.getChildNodes()) {
            if (child.getClass() == SimpleName.class) {
                SimpleName simpleName = (SimpleName) child;
                name = simpleName.asString();
            } else if (child.getClass() == Name.class) {
                Name simpleName = (Name) child;
                name = simpleName.asString();
            } else {
                Map<String,Object> childObject = handleNode(child);
                entities.add(childObject);
            }
        }

        usr = name;
        object.put("'key.name'", "'"+name+"'");
        object.put("'key.usr'", "'"+name+"'");
        object.put("'key.kind'", "'"+kind+"'");
        object.put("'key.entities'", entities);

        return object;
    }
}

